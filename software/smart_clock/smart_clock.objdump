
smart_clock.elf:     file format elf32-littlenios2
smart_clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002180

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000b74 memsz 0x00000b74 flags r-x
    LOAD off    0x00001b94 vaddr 0x00002b94 paddr 0x00002bc4 align 2**12
         filesz 0x00000030 memsz 0x00000030 flags rw-
    LOAD off    0x00001bf4 vaddr 0x00002bf4 paddr 0x00002bf4 align 2**12
         filesz 0x00000000 memsz 0x00000138 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000099c  00002180  00002180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  00002b1c  00002b1c  00001b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000030  00002b94  00002bc4  00001b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000138  00002bf4  00002bf4  00001bf4  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00002d2c  00002d2c  00001bc4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b8  00000000  00000000  00001be8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001c7b  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e72  00000000  00000000  00003b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000de9  00000000  00000000  0000498d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003d4  00000000  00000000  00005778  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d8d  00000000  00000000  00005b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000073a  00000000  00000000  000068d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00007014  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000128  00000000  00000000  00007028  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00008469  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000846c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000846f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00008470  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00008471  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00008475  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00008479  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000847d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000023  00000000  00000000  00008484  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00039e46  00000000  00000000  000084a7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002180 l    d  .text	00000000 .text
00002b1c l    d  .rodata	00000000 .rodata
00002b94 l    d  .rwdata	00000000 .rwdata
00002bf4 l    d  .bss	00000000 .bss
00002d2c l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../smart_clock_bsp//obj/HAL/src/crt0.o
000021b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00002c28 g     O .bss	00000004 alt_instruction_exception_handler
000022a8 g     F .text	00000040 horas
00002808 g     F .text	0000002c alt_main
00002c2c g     O .bss	00000100 alt_irq
00002bc4 g       *ABS*	00000000 __flash_rwdata_start
00002bc0 g     O .rwdata	00000004 UART
00002bb4 g     O .rwdata	00000004 btn_edge
000029ec g     F .text	00000038 alt_putstr
00002af8 g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002c20 g     O .bss	00000004 alt_argv
0000ab94 g       *ABS*	00000000 _gp
00002bb8 g     O .rwdata	00000004 btn_irq
000021bc g     F .text	00000054 timer_setup
00002c0c g     O .bss	00000004 segundosU
00002a84 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00002c00 g     O .bss	00000004 alarmaHorU
00002ba4 g     O .rwdata	00000004 out
000023a4 g     F .text	00000040 horasAl
00002d2c g       *ABS*	00000000 __bss_end
000026c0 g     F .text	00000068 alt_iic_isr_register
000026a8 g     F .text	00000018 alt_ic_irq_enabled
00002c18 g     O .bss	00000004 alt_irq_active
0000224c g     F .text	0000003c minutosAl
000020fc g     F .exceptions	00000060 alt_irq_handler
00002a7c g     F .text	00000004 alt_dcache_flush_all
00002288 g     F .text	00000020 segundos
00002bc4 g       *ABS*	00000000 __ram_rwdata_end
00002b94 g       *ABS*	00000000 __ram_rodata_end
00002d2c g       *ABS*	00000000 end
00002bf4 g     O .bss	00000004 alarm_stat
00002c10 g     O .bss	00000004 segundosD
00002bf8 g     O .bss	00000004 mode
0000215c g     F .exceptions	00000024 alt_instruction_exception_entry
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002a48 g     F .text	00000034 altera_avalon_jtag_uart_write
00002c04 g     O .bss	00000004 alarmaMinD
00002834 g     F .text	00000170 alt_printf
00002180 g     F .text	0000003c _start
00002a44 g     F .text	00000004 alt_sys_init
00002b94 g       *ABS*	00000000 __ram_rwdata_start
00002b1c g       *ABS*	00000000 __ram_rodata_start
00002ba8 g     O .rwdata	00000004 timer_control
00002d2c g       *ABS*	00000000 __alt_stack_base
00002c14 g     O .bss	00000004 edge_val
00002bfc g     O .bss	00000004 alarmaHorD
000022e8 g     F .text	000000bc counter
00002bf4 g       *ABS*	00000000 __bss_start
00002590 g     F .text	000000a4 main
00002000 g       *ABS*	00000000 __alt_mem_RAM
00002c1c g     O .bss	00000004 alt_envp
00002b1c g       *ABS*	00000000 __flash_rodata_start
00002c08 g     O .bss	00000004 alarmaMinU
00002a24 g     F .text	00000020 alt_irq_init
00002bb0 g     O .rwdata	00000004 btn_data
00002b98 g     O .rwdata	00000004 horasU
00002c24 g     O .bss	00000004 alt_argc
00002020 g       .exceptions	00000000 alt_irq_entry
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002ba0 g     O .rwdata	00000004 minutosU
00002b9c g     O .rwdata	00000004 minutosD
00002634 g     F .text	00000004 alt_ic_isr_register
00002bc4 g       *ABS*	00000000 _edata
00002d2c g       *ABS*	00000000 _end
00002180 g       *ABS*	00000000 __ram_exceptions_end
00002670 g     F .text	00000038 alt_ic_irq_disable
00002bac g     O .rwdata	00000004 timer_status
00002528 g     F .text	00000068 io_button_setup
000023e4 g     F .text	00000144 io_button
00004000 g       *ABS*	00000000 __alt_data_end
00002020 g     F .exceptions	00000000 alt_exception
00002b94 g     O .rwdata	00000004 horasD
0000200c g       .entry	00000000 _exit
00002b00 g     F .text	0000001c strlen
000029a4 g     F .text	00000048 alt_putchar
00002a80 g     F .text	00000004 alt_icache_flush_all
00002bbc g     O .rwdata	00000004 alt_priority_mask
00002638 g     F .text	00000038 alt_ic_irq_enable
00002210 g     F .text	0000003c minutos
00002728 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08486014 	ori	at,at,8576
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .exceptions:

00002020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    2020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    2024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    2028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    202c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    2030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    2034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    2038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    203c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    2040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    2044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    2048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    204c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    2050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    2054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    2058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    205c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    2060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    2064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    2068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    206c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    2070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    2074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    2078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    207c:	10000326 	beq	r2,zero,208c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    2080:	20000226 	beq	r4,zero,208c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    2084:	00020fc0 	call	20fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    2088:	00000706 	br	20a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    208c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    2090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    2094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    2098:	000215c0 	call	215c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    209c:	1000021e 	bne	r2,zero,20a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    20a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    20a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    20a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    20ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    20b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    20b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    20b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    20bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    20c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    20c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    20c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    20cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    20d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    20d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    20d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    20dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    20e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    20e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    20e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    20ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    20f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    20f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    20f8:	ef80083a 	eret

000020fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    20fc:	defffe04 	addi	sp,sp,-8
    2100:	dfc00115 	stw	ra,4(sp)
    2104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    2108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    210c:	04000034 	movhi	r16,0
    2110:	840b0b04 	addi	r16,r16,11308

  active = alt_irq_pending ();

  do
  {
    i = 0;
    2114:	0005883a 	mov	r2,zero
    mask = 1;
    2118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    211c:	20ca703a 	and	r5,r4,r3
    2120:	28000b26 	beq	r5,zero,2150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    2124:	100490fa 	slli	r2,r2,3
    2128:	8085883a 	add	r2,r16,r2
    212c:	10c00017 	ldw	r3,0(r2)
    2130:	11000117 	ldw	r4,4(r2)
    2134:	183ee83a 	callr	r3
    2138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    213c:	203ff51e 	bne	r4,zero,2114 <_gp+0xffff7580>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    2140:	dfc00117 	ldw	ra,4(sp)
    2144:	dc000017 	ldw	r16,0(sp)
    2148:	dec00204 	addi	sp,sp,8
    214c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    2150:	18c7883a 	add	r3,r3,r3
      i++;
    2154:	10800044 	addi	r2,r2,1

    } while (1);
    2158:	003ff006 	br	211c <_gp+0xffff7588>

0000215c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    215c:	d0a02517 	ldw	r2,-32620(gp)
    2160:	10000426 	beq	r2,zero,2174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    2164:	200b883a 	mov	r5,r4
    2168:	000d883a 	mov	r6,zero
    216c:	013fffc4 	movi	r4,-1
    2170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    2174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    2178:	0005883a 	mov	r2,zero
    217c:	f800283a 	ret

Disassembly of section .text:

00002180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2184:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    218c:	d6aae514 	ori	gp,gp,43924
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2194:	108afd14 	ori	r2,r2,11252

    movhi r3, %hi(__bss_end)
    2198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    219c:	18cb4b14 	ori	r3,r3,11564

    beq r2, r3, 1f
    21a0:	10c00326 	beq	r2,r3,21b0 <_start+0x30>

0:
    stw zero, (r2)
    21a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    21a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    21ac:	10fffd36 	bltu	r2,r3,21a4 <_gp+0xffff7610>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    21b0:	00027280 	call	2728 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    21b4:	00028080 	call	2808 <alt_main>

000021b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    21b8:	003fff06 	br	21b8 <_gp+0xffff7624>

000021bc <timer_setup>:
  return 0;
}

//Inicializa el timer y llama a counter
void timer_setup(){
	* timer_control = 0x7;
    21bc:	d0a00517 	ldw	r2,-32748(gp)
  }
  return 0;
}

//Inicializa el timer y llama a counter
void timer_setup(){
    21c0:	defffd04 	addi	sp,sp,-12
    21c4:	dfc00215 	stw	ra,8(sp)
    21c8:	dc000115 	stw	r16,4(sp)
	* timer_control = 0x7;
    21cc:	00c001c4 	movi	r3,7
	alt_ic_irq_enable(0,2);
    21d0:	04000084 	movi	r16,2
  return 0;
}

//Inicializa el timer y llama a counter
void timer_setup(){
	* timer_control = 0x7;
    21d4:	10c00005 	stb	r3,0(r2)
	alt_ic_irq_enable(0,2);
    21d8:	800b883a 	mov	r5,r16
    21dc:	0009883a 	mov	r4,zero
    21e0:	00026380 	call	2638 <alt_ic_irq_enable>
	alt_ic_isr_register(0,2,counter,0,0x00);
    21e4:	01800034 	movhi	r6,0
    21e8:	d8000015 	stw	zero,0(sp)
    21ec:	000f883a 	mov	r7,zero
    21f0:	3188ba04 	addi	r6,r6,8936
    21f4:	800b883a 	mov	r5,r16
    21f8:	0009883a 	mov	r4,zero
    21fc:	00026340 	call	2634 <alt_ic_isr_register>
}
    2200:	dfc00217 	ldw	ra,8(sp)
    2204:	dc000117 	ldw	r16,4(sp)
    2208:	dec00304 	addi	sp,sp,12
    220c:	f800283a 	ret

00002210 <minutos>:
	}
}

//Verifica minutos
void minutos(){
	if(minutosU == 10){
    2210:	d0e00317 	ldw	r3,-32756(gp)
    2214:	00800284 	movi	r2,10
    2218:	1880041e 	bne	r3,r2,222c <minutos+0x1c>
		minutosU = 0;
		minutosD += 1;
    221c:	d0a00217 	ldw	r2,-32760(gp)
}

//Verifica minutos
void minutos(){
	if(minutosU == 10){
		minutosU = 0;
    2220:	d0200315 	stw	zero,-32756(gp)
		minutosD += 1;
    2224:	10800044 	addi	r2,r2,1
    2228:	d0a00215 	stw	r2,-32760(gp)
	}if(minutosD == 6){
    222c:	d0e00217 	ldw	r3,-32760(gp)
    2230:	00800184 	movi	r2,6
    2234:	1880041e 	bne	r3,r2,2248 <minutos+0x38>
		horasU += 1;
    2238:	d0a00117 	ldw	r2,-32764(gp)
		minutosD = 0;
    223c:	d0200215 	stw	zero,-32760(gp)
void minutos(){
	if(minutosU == 10){
		minutosU = 0;
		minutosD += 1;
	}if(minutosD == 6){
		horasU += 1;
    2240:	10800044 	addi	r2,r2,1
    2244:	d0a00115 	stw	r2,-32764(gp)
    2248:	f800283a 	ret

0000224c <minutosAl>:
	}
}

//Verifica minutos
void minutosAl(){
	if(alarmaMinU == 10){
    224c:	d0e01d17 	ldw	r3,-32652(gp)
    2250:	00800284 	movi	r2,10
    2254:	1880041e 	bne	r3,r2,2268 <minutosAl+0x1c>
		alarmaMinU = 0;
		alarmaMinD += 1;
    2258:	d0a01c17 	ldw	r2,-32656(gp)
}

//Verifica minutos
void minutosAl(){
	if(alarmaMinU == 10){
		alarmaMinU = 0;
    225c:	d0201d15 	stw	zero,-32652(gp)
		alarmaMinD += 1;
    2260:	10800044 	addi	r2,r2,1
    2264:	d0a01c15 	stw	r2,-32656(gp)
	}if(alarmaMinD == 6){
    2268:	d0e01c17 	ldw	r3,-32656(gp)
    226c:	00800184 	movi	r2,6
    2270:	1880041e 	bne	r3,r2,2284 <minutosAl+0x38>
		alarmaHorU += 1;
    2274:	d0a01b17 	ldw	r2,-32660(gp)
		alarmaMinD = 0;
    2278:	d0201c15 	stw	zero,-32656(gp)
void minutosAl(){
	if(alarmaMinU == 10){
		alarmaMinU = 0;
		alarmaMinD += 1;
	}if(alarmaMinD == 6){
		alarmaHorU += 1;
    227c:	10800044 	addi	r2,r2,1
    2280:	d0a01b15 	stw	r2,-32660(gp)
    2284:	f800283a 	ret

00002288 <segundos>:
	}
}

//Verifica segundos
void segundos(){
	if(segundosD == 6){
    2288:	d0e01f17 	ldw	r3,-32644(gp)
    228c:	00800184 	movi	r2,6
    2290:	1880041e 	bne	r3,r2,22a4 <segundos+0x1c>
		segundosD = 0;
		minutosU += 1;
    2294:	d0a00317 	ldw	r2,-32756(gp)
}

//Verifica segundos
void segundos(){
	if(segundosD == 6){
		segundosD = 0;
    2298:	d0201f15 	stw	zero,-32644(gp)
		minutosU += 1;
    229c:	10800044 	addi	r2,r2,1
    22a0:	d0a00315 	stw	r2,-32756(gp)
    22a4:	f800283a 	ret

000022a8 <horas>:



//Verifica horas
void horas(){
	if(horasU == 10){
    22a8:	d0e00117 	ldw	r3,-32764(gp)
    22ac:	00800284 	movi	r2,10
    22b0:	1880041e 	bne	r3,r2,22c4 <horas+0x1c>
		horasU = 0;
		horasD += 1;
    22b4:	d0a00017 	ldw	r2,-32768(gp)


//Verifica horas
void horas(){
	if(horasU == 10){
		horasU = 0;
    22b8:	d0200115 	stw	zero,-32764(gp)
		horasD += 1;
    22bc:	10800044 	addi	r2,r2,1
    22c0:	d0a00015 	stw	r2,-32768(gp)
	}if(horasD == 2 && horasU == 4){
    22c4:	d0e00017 	ldw	r3,-32768(gp)
    22c8:	00800084 	movi	r2,2
    22cc:	1880051e 	bne	r3,r2,22e4 <horas+0x3c>
    22d0:	d0e00117 	ldw	r3,-32764(gp)
    22d4:	00800104 	movi	r2,4
    22d8:	1880021e 	bne	r3,r2,22e4 <horas+0x3c>
		horasD = 0;
    22dc:	d0200015 	stw	zero,-32768(gp)
		horasU = 0;
    22e0:	d0200115 	stw	zero,-32764(gp)
    22e4:	f800283a 	ret

000022e8 <counter>:
	alt_ic_isr_register(0,2,counter,0,0x00);
}

//Actualiza el estado del reloj cada 20s
void counter(){
	*timer_status = 0;
    22e8:	d0a00617 	ldw	r2,-32744(gp)
	alt_ic_irq_enable(0,2);
	alt_ic_isr_register(0,2,counter,0,0x00);
}

//Actualiza el estado del reloj cada 20s
void counter(){
    22ec:	defffc04 	addi	sp,sp,-16
    22f0:	dfc00315 	stw	ra,12(sp)
	*timer_status = 0;
    22f4:	10000005 	stb	zero,0(r2)
	segundosD += 2;
    22f8:	d0a01f17 	ldw	r2,-32644(gp)
    22fc:	10800084 	addi	r2,r2,2
    2300:	d0a01f15 	stw	r2,-32644(gp)
	segundos();
    2304:	00022880 	call	2288 <segundos>
	minutos();
    2308:	00022100 	call	2210 <minutos>
	horas();
    230c:	00022a80 	call	22a8 <horas>
	if(mode == 0){
    2310:	d0a01917 	ldw	r2,-32668(gp)
    2314:	10000c1e 	bne	r2,zero,2348 <counter+0x60>
		alt_printf("%x%x : %x%x : %x%x\n",horasD, horasU, minutosD, minutosU ,segundosD, segundosU);
    2318:	d0a01e17 	ldw	r2,-32648(gp)
    231c:	d1e00217 	ldw	r7,-32760(gp)
    2320:	d1a00117 	ldw	r6,-32764(gp)
    2324:	d8800215 	stw	r2,8(sp)
    2328:	d0a01f17 	ldw	r2,-32644(gp)
    232c:	d1600017 	ldw	r5,-32768(gp)
    2330:	01000034 	movhi	r4,0
    2334:	d8800115 	stw	r2,4(sp)
    2338:	d0a00317 	ldw	r2,-32756(gp)
    233c:	210ac704 	addi	r4,r4,11036
    2340:	d8800015 	stw	r2,0(sp)
    2344:	00028340 	call	2834 <alt_printf>
	}
	if(horasD == alarmaHorD && horasU == alarmaHorU && minutosD == alarmaMinD && minutosU == alarmaMinU && alarm_stat == 1){
    2348:	d0a01a17 	ldw	r2,-32664(gp)
    234c:	d0e00017 	ldw	r3,-32768(gp)
    2350:	1880111e 	bne	r3,r2,2398 <counter+0xb0>
    2354:	d0a01b17 	ldw	r2,-32660(gp)
    2358:	d0e00117 	ldw	r3,-32764(gp)
    235c:	18800e1e 	bne	r3,r2,2398 <counter+0xb0>
    2360:	d0a01c17 	ldw	r2,-32656(gp)
    2364:	d0e00217 	ldw	r3,-32760(gp)
    2368:	18800b1e 	bne	r3,r2,2398 <counter+0xb0>
    236c:	d0a01d17 	ldw	r2,-32652(gp)
    2370:	d0e00317 	ldw	r3,-32756(gp)
    2374:	1880081e 	bne	r3,r2,2398 <counter+0xb0>
    2378:	d0e01817 	ldw	r3,-32672(gp)
    237c:	00800044 	movi	r2,1
    2380:	1880051e 	bne	r3,r2,2398 <counter+0xb0>
		alt_printf("Beep Beep Beep Beep Beep\n");
    2384:	01000034 	movhi	r4,0
    2388:	210acc04 	addi	r4,r4,11056
	}
}
    238c:	dfc00317 	ldw	ra,12(sp)
    2390:	dec00404 	addi	sp,sp,16
	horas();
	if(mode == 0){
		alt_printf("%x%x : %x%x : %x%x\n",horasD, horasU, minutosD, minutosU ,segundosD, segundosU);
	}
	if(horasD == alarmaHorD && horasU == alarmaHorU && minutosD == alarmaMinD && minutosU == alarmaMinU && alarm_stat == 1){
		alt_printf("Beep Beep Beep Beep Beep\n");
    2394:	00028341 	jmpi	2834 <alt_printf>
	}
}
    2398:	dfc00317 	ldw	ra,12(sp)
    239c:	dec00404 	addi	sp,sp,16
    23a0:	f800283a 	ret

000023a4 <horasAl>:
		horasU = 0;
	}
}

void horasAl(){
	if(alarmaHorU == 10){
    23a4:	d0e01b17 	ldw	r3,-32660(gp)
    23a8:	00800284 	movi	r2,10
    23ac:	1880041e 	bne	r3,r2,23c0 <horasAl+0x1c>
		alarmaHorU = 0;
		alarmaHorD += 1;
    23b0:	d0a01a17 	ldw	r2,-32664(gp)
	}
}

void horasAl(){
	if(alarmaHorU == 10){
		alarmaHorU = 0;
    23b4:	d0201b15 	stw	zero,-32660(gp)
		alarmaHorD += 1;
    23b8:	10800044 	addi	r2,r2,1
    23bc:	d0a01a15 	stw	r2,-32664(gp)
	}if(alarmaHorD == 2 && horasU == 4){
    23c0:	d0e01a17 	ldw	r3,-32664(gp)
    23c4:	00800084 	movi	r2,2
    23c8:	1880051e 	bne	r3,r2,23e0 <horasAl+0x3c>
    23cc:	d0e00117 	ldw	r3,-32764(gp)
    23d0:	00800104 	movi	r2,4
    23d4:	1880021e 	bne	r3,r2,23e0 <horasAl+0x3c>
		alarmaHorD = 0;
    23d8:	d0201a15 	stw	zero,-32664(gp)
		alarmaHorU = 0;
    23dc:	d0201b15 	stw	zero,-32660(gp)
    23e0:	f800283a 	ret

000023e4 <io_button>:

void io_button(void * context){
	volatile int * edge_ptr;
	edge_ptr = (volatile int *) context;

	 if(*btn_data == 0x01){
    23e4:	d0a00717 	ldw	r2,-32740(gp)
			edge_val_ptr,
			0x00);
}


void io_button(void * context){
    23e8:	defffe04 	addi	sp,sp,-8
    23ec:	dc000015 	stw	r16,0(sp)
    23f0:	dfc00115 	stw	ra,4(sp)
	volatile int * edge_ptr;
	edge_ptr = (volatile int *) context;

	 if(*btn_data == 0x01){
    23f4:	10c00003 	ldbu	r3,0(r2)
    23f8:	04000044 	movi	r16,1
    23fc:	18c03fcc 	andi	r3,r3,255
    2400:	1c00081e 	bne	r3,r16,2424 <io_button+0x40>
	  	mode = mode + 1;
    2404:	d0a01917 	ldw	r2,-32668(gp)
	  	if(mode == 3){
    2408:	00c000c4 	movi	r3,3
void io_button(void * context){
	volatile int * edge_ptr;
	edge_ptr = (volatile int *) context;

	 if(*btn_data == 0x01){
	  	mode = mode + 1;
    240c:	1405883a 	add	r2,r2,r16
	  	if(mode == 3){
    2410:	10c00226 	beq	r2,r3,241c <io_button+0x38>
void io_button(void * context){
	volatile int * edge_ptr;
	edge_ptr = (volatile int *) context;

	 if(*btn_data == 0x01){
	  	mode = mode + 1;
    2414:	d0a01915 	stw	r2,-32668(gp)
    2418:	00003d06 	br	2510 <io_button+0x12c>
	  	if(mode == 3){
	  		mode = 0;
    241c:	d0201915 	stw	zero,-32668(gp)
    2420:	00003b06 	br	2510 <io_button+0x12c>
	  	}
	  }
	  else if(*btn_data == 0x02){ //Boton de Minutos
    2424:	10c00003 	ldbu	r3,0(r2)
    2428:	01000084 	movi	r4,2
    242c:	18c03fcc 	andi	r3,r3,255
    2430:	1900111e 	bne	r3,r4,2478 <io_button+0x94>
		  if(mode == 2){
    2434:	d0a01917 	ldw	r2,-32668(gp)
    2438:	10c0081e 	bne	r2,r3,245c <io_button+0x78>
			  minutosU += 1;
    243c:	d0a00317 	ldw	r2,-32756(gp)
			  segundosU = 0;
    2440:	d0201e15 	stw	zero,-32648(gp)
			  segundosD = 0;
    2444:	d0201f15 	stw	zero,-32644(gp)
	  		mode = 0;
	  	}
	  }
	  else if(*btn_data == 0x02){ //Boton de Minutos
		  if(mode == 2){
			  minutosU += 1;
    2448:	10800044 	addi	r2,r2,1
    244c:	d0a00315 	stw	r2,-32756(gp)
			  segundosU = 0;
			  segundosD = 0;
			  segundos();
    2450:	00022880 	call	2288 <segundos>
			  minutos();
    2454:	00022100 	call	2210 <minutos>
			  horas();
    2458:	00022a80 	call	22a8 <horas>
		  }
		  if(mode == 1){
    245c:	d0e01917 	ldw	r3,-32668(gp)
    2460:	00800044 	movi	r2,1
    2464:	18802a1e 	bne	r3,r2,2510 <io_button+0x12c>
			  alarmaMinU += 1;
    2468:	d0a01d17 	ldw	r2,-32652(gp)
    246c:	10800044 	addi	r2,r2,1
    2470:	d0a01d15 	stw	r2,-32652(gp)
    2474:	00001406 	br	24c8 <io_button+0xe4>
			  minutosAl();
			  horasAl();
		  }
	  }
	  else if(*btn_data == 0x04){ //Boton de horas
    2478:	10c00003 	ldbu	r3,0(r2)
    247c:	01400104 	movi	r5,4
    2480:	18c03fcc 	andi	r3,r3,255
    2484:	1940131e 	bne	r3,r5,24d4 <io_button+0xf0>
		  if(mode == 2){
    2488:	d0a01917 	ldw	r2,-32668(gp)
    248c:	1100081e 	bne	r2,r4,24b0 <io_button+0xcc>
			  horasU += 1;
    2490:	d0a00117 	ldw	r2,-32764(gp)
			  segundosU = 0;
    2494:	d0201e15 	stw	zero,-32648(gp)
			  segundosD = 0;
    2498:	d0201f15 	stw	zero,-32644(gp)
			  horasAl();
		  }
	  }
	  else if(*btn_data == 0x04){ //Boton de horas
		  if(mode == 2){
			  horasU += 1;
    249c:	10800044 	addi	r2,r2,1
    24a0:	d0a00115 	stw	r2,-32764(gp)
			  segundosU = 0;
			  segundosD = 0;
		  	  segundos();
    24a4:	00022880 	call	2288 <segundos>
		  	  minutos();
    24a8:	00022100 	call	2210 <minutos>
		  	  horas();
    24ac:	00022a80 	call	22a8 <horas>
		  }
		  if(mode == 1){
    24b0:	d0e01917 	ldw	r3,-32668(gp)
    24b4:	00800044 	movi	r2,1
    24b8:	1880151e 	bne	r3,r2,2510 <io_button+0x12c>
			  alarmaHorU += 1;
    24bc:	d0a01b17 	ldw	r2,-32660(gp)
    24c0:	10800044 	addi	r2,r2,1
    24c4:	d0a01b15 	stw	r2,-32660(gp)
			  minutosAl();
    24c8:	000224c0 	call	224c <minutosAl>
			  horasAl();
    24cc:	00023a40 	call	23a4 <horasAl>
    24d0:	00000f06 	br	2510 <io_button+0x12c>
		  }
	  }
	  else if(*btn_data == 0x08){
    24d4:	10800003 	ldbu	r2,0(r2)
    24d8:	00c00204 	movi	r3,8
    24dc:	10803fcc 	andi	r2,r2,255
    24e0:	10c00b1e 	bne	r2,r3,2510 <io_button+0x12c>
		  if(alarm_stat == 0){
    24e4:	d0a01817 	ldw	r2,-32672(gp)
    24e8:	1000051e 	bne	r2,zero,2500 <io_button+0x11c>
			  alt_putstr("Alarm set to On\n");
    24ec:	01000034 	movhi	r4,0
    24f0:	210ad304 	addi	r4,r4,11084
    24f4:	00029ec0 	call	29ec <alt_putstr>
			  alarm_stat = 1;
    24f8:	d4201815 	stw	r16,-32672(gp)
    24fc:	00000406 	br	2510 <io_button+0x12c>
		  }else{
			  alt_putstr("Alarm set to Off\n");
    2500:	01000034 	movhi	r4,0
    2504:	210ad804 	addi	r4,r4,11104
    2508:	00029ec0 	call	29ec <alt_putstr>
			  alarm_stat = 0;
    250c:	d0201815 	stw	zero,-32672(gp)
		  }
	  }

	  *btn_edge = 0x0;
    2510:	d0a00817 	ldw	r2,-32736(gp)
    2514:	10000005 	stb	zero,0(r2)
}
    2518:	dfc00117 	ldw	ra,4(sp)
    251c:	dc000017 	ldw	r16,0(sp)
    2520:	dec00204 	addi	sp,sp,8
    2524:	f800283a 	ret

00002528 <io_button_setup>:
	}
}


void io_button_setup(){
	* btn_irq = 15;
    2528:	d0a00917 	ldw	r2,-32732(gp)
		alarmaHorU = 0;
	}
}


void io_button_setup(){
    252c:	defffc04 	addi	sp,sp,-16
    2530:	dfc00315 	stw	ra,12(sp)
    2534:	dc400215 	stw	r17,8(sp)
    2538:	dc000115 	stw	r16,4(sp)
	* btn_irq = 15;
    253c:	00c003c4 	movi	r3,15
    2540:	10c00005 	stb	r3,0(r2)
	* btn_edge = 0;
    2544:	d0a00817 	ldw	r2,-32736(gp)

	void * edge_val_ptr;

	edge_val_ptr = (void *) edge_val;

	alt_ic_irq_enable(0,1);
    2548:	04000044 	movi	r16,1
    254c:	800b883a 	mov	r5,r16
}


void io_button_setup(){
	* btn_irq = 15;
	* btn_edge = 0;
    2550:	10000005 	stb	zero,0(r2)

	void * edge_val_ptr;

	edge_val_ptr = (void *) edge_val;
    2554:	d4602017 	ldw	r17,-32640(gp)

	alt_ic_irq_enable(0,1);
    2558:	0009883a 	mov	r4,zero
    255c:	00026380 	call	2638 <alt_ic_irq_enable>

	alt_ic_isr_register(0,
    2560:	01800034 	movhi	r6,0
    2564:	d8000015 	stw	zero,0(sp)
    2568:	880f883a 	mov	r7,r17
    256c:	3188f904 	addi	r6,r6,9188
    2570:	800b883a 	mov	r5,r16
    2574:	0009883a 	mov	r4,zero
    2578:	00026340 	call	2634 <alt_ic_isr_register>
			1,
			io_button,
			edge_val_ptr,
			0x00);
}
    257c:	dfc00317 	ldw	ra,12(sp)
    2580:	dc400217 	ldw	r17,8(sp)
    2584:	dc000117 	ldw	r16,4(sp)
    2588:	dec00404 	addi	sp,sp,16
    258c:	f800283a 	ret

00002590 <main>:
int alarm_stat = 0;

int main(void)
{ 

  *timer_status = 0;
    2590:	d0a00617 	ldw	r2,-32744(gp)

int mode = 0;
int alarm_stat = 0;

int main(void)
{ 
    2594:	defffb04 	addi	sp,sp,-20
    2598:	dfc00415 	stw	ra,16(sp)
    259c:	dc000315 	stw	r16,12(sp)

  *timer_status = 0;
    25a0:	10000005 	stb	zero,0(r2)

  io_button_setup();
    25a4:	00025280 	call	2528 <io_button_setup>
  timer_setup();


  /* Event loop never exits. */
  while (1){
	  if(mode == 1){
    25a8:	04000044 	movi	r16,1

  *timer_status = 0;

  io_button_setup();

  timer_setup();
    25ac:	00021bc0 	call	21bc <timer_setup>


  /* Event loop never exits. */
  while (1){
	  if(mode == 1){
    25b0:	d0a01917 	ldw	r2,-32668(gp)
    25b4:	14000b1e 	bne	r2,r16,25e4 <main+0x54>
		  alt_printf("Set Alarm Mode\n");
    25b8:	01000034 	movhi	r4,0
    25bc:	210add04 	addi	r4,r4,11124
    25c0:	00028340 	call	2834 <alt_printf>
		  alt_printf("%x%x : %x%x : %x%x\n",alarmaHorD, alarmaHorU, alarmaMinD, alarmaMinU ,0x0, 0x0);
    25c4:	d0a01d17 	ldw	r2,-32652(gp)
    25c8:	d8000215 	stw	zero,8(sp)
    25cc:	d8000115 	stw	zero,4(sp)
    25d0:	d8800015 	stw	r2,0(sp)
    25d4:	d1e01c17 	ldw	r7,-32656(gp)
    25d8:	d1a01b17 	ldw	r6,-32660(gp)
    25dc:	d1601a17 	ldw	r5,-32664(gp)
    25e0:	00001006 	br	2624 <main+0x94>
	  }else if(mode == 2){
    25e4:	00c00084 	movi	r3,2
    25e8:	10fff11e 	bne	r2,r3,25b0 <_gp+0xffff7a1c>
		  segundosD = 0;
		  segundosU = 0;
		  alt_printf("Set Time Mode\n");
    25ec:	01000034 	movhi	r4,0
    25f0:	210ae104 	addi	r4,r4,11140
  while (1){
	  if(mode == 1){
		  alt_printf("Set Alarm Mode\n");
		  alt_printf("%x%x : %x%x : %x%x\n",alarmaHorD, alarmaHorU, alarmaMinD, alarmaMinU ,0x0, 0x0);
	  }else if(mode == 2){
		  segundosD = 0;
    25f4:	d0201f15 	stw	zero,-32644(gp)
		  segundosU = 0;
    25f8:	d0201e15 	stw	zero,-32648(gp)
		  alt_printf("Set Time Mode\n");
    25fc:	00028340 	call	2834 <alt_printf>
		  alt_printf("%x%x : %x%x : %x%x\n",horasD, horasU, minutosD, minutosU ,segundosD, segundosU);
    2600:	d0a01e17 	ldw	r2,-32648(gp)
    2604:	d1e00217 	ldw	r7,-32760(gp)
    2608:	d1a00117 	ldw	r6,-32764(gp)
    260c:	d8800215 	stw	r2,8(sp)
    2610:	d0a01f17 	ldw	r2,-32644(gp)
    2614:	d1600017 	ldw	r5,-32768(gp)
    2618:	d8800115 	stw	r2,4(sp)
    261c:	d0a00317 	ldw	r2,-32756(gp)
    2620:	d8800015 	stw	r2,0(sp)
    2624:	01000034 	movhi	r4,0
    2628:	210ac704 	addi	r4,r4,11036
    262c:	00028340 	call	2834 <alt_printf>
    2630:	003fdf06 	br	25b0 <_gp+0xffff7a1c>

00002634 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2634:	00026c01 	jmpi	26c0 <alt_iic_isr_register>

00002638 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2638:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    263c:	00bfff84 	movi	r2,-2
    2640:	2084703a 	and	r2,r4,r2
    2644:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2648:	00c00044 	movi	r3,1
    264c:	d0a02117 	ldw	r2,-32636(gp)
    2650:	194a983a 	sll	r5,r3,r5
    2654:	288ab03a 	or	r5,r5,r2
    2658:	d1602115 	stw	r5,-32636(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    265c:	d0a02117 	ldw	r2,-32636(gp)
    2660:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2664:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    2668:	0005883a 	mov	r2,zero
    266c:	f800283a 	ret

00002670 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2670:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2674:	00bfff84 	movi	r2,-2
    2678:	2084703a 	and	r2,r4,r2
    267c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2680:	00ffff84 	movi	r3,-2
    2684:	d0a02117 	ldw	r2,-32636(gp)
    2688:	194a183a 	rol	r5,r3,r5
    268c:	288a703a 	and	r5,r5,r2
    2690:	d1602115 	stw	r5,-32636(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2694:	d0a02117 	ldw	r2,-32636(gp)
    2698:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    269c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    26a0:	0005883a 	mov	r2,zero
    26a4:	f800283a 	ret

000026a8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    26a8:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    26ac:	00800044 	movi	r2,1
    26b0:	1144983a 	sll	r2,r2,r5
    26b4:	10c4703a 	and	r2,r2,r3
}
    26b8:	1004c03a 	cmpne	r2,r2,zero
    26bc:	f800283a 	ret

000026c0 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    26c0:	00c007c4 	movi	r3,31
    26c4:	19401616 	blt	r3,r5,2720 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    26c8:	defffe04 	addi	sp,sp,-8
    26cc:	dfc00115 	stw	ra,4(sp)
    26d0:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    26d4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26d8:	00ffff84 	movi	r3,-2
    26dc:	80c6703a 	and	r3,r16,r3
    26e0:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    26e4:	280490fa 	slli	r2,r5,3
    26e8:	00c00034 	movhi	r3,0
    26ec:	18cb0b04 	addi	r3,r3,11308
    26f0:	1885883a 	add	r2,r3,r2
    26f4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    26f8:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    26fc:	30000226 	beq	r6,zero,2708 <alt_iic_isr_register+0x48>
    2700:	00026380 	call	2638 <alt_ic_irq_enable>
    2704:	00000106 	br	270c <alt_iic_isr_register+0x4c>
    2708:	00026700 	call	2670 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    270c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    2710:	dfc00117 	ldw	ra,4(sp)
    2714:	dc000017 	ldw	r16,0(sp)
    2718:	dec00204 	addi	sp,sp,8
    271c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    2720:	00bffa84 	movi	r2,-22
    2724:	f800283a 	ret

00002728 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2728:	deffff04 	addi	sp,sp,-4
    272c:	01000034 	movhi	r4,0
    2730:	01400034 	movhi	r5,0
    2734:	dfc00015 	stw	ra,0(sp)
    2738:	210ae504 	addi	r4,r4,11156
    273c:	294af104 	addi	r5,r5,11204

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2740:	2140061e 	bne	r4,r5,275c <alt_load+0x34>
    2744:	01000034 	movhi	r4,0
    2748:	01400034 	movhi	r5,0
    274c:	21080804 	addi	r4,r4,8224
    2750:	29480804 	addi	r5,r5,8224
    2754:	2140121e 	bne	r4,r5,27a0 <alt_load+0x78>
    2758:	00000b06 	br	2788 <alt_load+0x60>
    275c:	00c00034 	movhi	r3,0
    2760:	18caf104 	addi	r3,r3,11204
    2764:	1907c83a 	sub	r3,r3,r4
    2768:	0005883a 	mov	r2,zero
  {
    while( to != end )
    276c:	10fff526 	beq	r2,r3,2744 <_gp+0xffff7bb0>
    {
      *to++ = *from++;
    2770:	114f883a 	add	r7,r2,r5
    2774:	39c00017 	ldw	r7,0(r7)
    2778:	110d883a 	add	r6,r2,r4
    277c:	10800104 	addi	r2,r2,4
    2780:	31c00015 	stw	r7,0(r6)
    2784:	003ff906 	br	276c <_gp+0xffff7bd8>
    2788:	01000034 	movhi	r4,0
    278c:	01400034 	movhi	r5,0
    2790:	210ac704 	addi	r4,r4,11036
    2794:	294ac704 	addi	r5,r5,11036

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2798:	2140101e 	bne	r4,r5,27dc <alt_load+0xb4>
    279c:	00000b06 	br	27cc <alt_load+0xa4>
    27a0:	00c00034 	movhi	r3,0
    27a4:	18c86004 	addi	r3,r3,8576
    27a8:	1907c83a 	sub	r3,r3,r4
    27ac:	0005883a 	mov	r2,zero
  {
    while( to != end )
    27b0:	10fff526 	beq	r2,r3,2788 <_gp+0xffff7bf4>
    {
      *to++ = *from++;
    27b4:	114f883a 	add	r7,r2,r5
    27b8:	39c00017 	ldw	r7,0(r7)
    27bc:	110d883a 	add	r6,r2,r4
    27c0:	10800104 	addi	r2,r2,4
    27c4:	31c00015 	stw	r7,0(r6)
    27c8:	003ff906 	br	27b0 <_gp+0xffff7c1c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    27cc:	0002a7c0 	call	2a7c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    27d0:	dfc00017 	ldw	ra,0(sp)
    27d4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    27d8:	0002a801 	jmpi	2a80 <alt_icache_flush_all>
    27dc:	00c00034 	movhi	r3,0
    27e0:	18cae504 	addi	r3,r3,11156
    27e4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    27e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    27ec:	18bff726 	beq	r3,r2,27cc <_gp+0xffff7c38>
    {
      *to++ = *from++;
    27f0:	114f883a 	add	r7,r2,r5
    27f4:	39c00017 	ldw	r7,0(r7)
    27f8:	110d883a 	add	r6,r2,r4
    27fc:	10800104 	addi	r2,r2,4
    2800:	31c00015 	stw	r7,0(r6)
    2804:	003ff906 	br	27ec <_gp+0xffff7c58>

00002808 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2808:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    280c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2810:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2814:	0002a240 	call	2a24 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2818:	0002a440 	call	2a44 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    281c:	d1a02217 	ldw	r6,-32632(gp)
    2820:	d1602317 	ldw	r5,-32628(gp)
    2824:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2828:	dfc00017 	ldw	ra,0(sp)
    282c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2830:	00025901 	jmpi	2590 <main>

00002834 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2834:	defff204 	addi	sp,sp,-56
    2838:	2005883a 	mov	r2,r4
    283c:	dfc00a15 	stw	ra,40(sp)
    2840:	df000915 	stw	fp,36(sp)
    2844:	ddc00815 	stw	r23,32(sp)
    2848:	dd800715 	stw	r22,28(sp)
    284c:	dd400615 	stw	r21,24(sp)
    2850:	dd000515 	stw	r20,20(sp)
    2854:	dcc00415 	stw	r19,16(sp)
    2858:	dc800315 	stw	r18,12(sp)
    285c:	dc400215 	stw	r17,8(sp)
    2860:	dc000115 	stw	r16,4(sp)
    2864:	d9400b15 	stw	r5,44(sp)
    2868:	d9800c15 	stw	r6,48(sp)
    286c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2870:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    2874:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2878:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    287c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2880:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2884:	11000007 	ldb	r4,0(r2)
    2888:	20003a26 	beq	r4,zero,2974 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    288c:	24000226 	beq	r4,r16,2898 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2890:	14400044 	addi	r17,r2,1
    2894:	00001406 	br	28e8 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2898:	14400084 	addi	r17,r2,2
    289c:	10800047 	ldb	r2,1(r2)
    28a0:	10003426 	beq	r2,zero,2974 <alt_printf+0x140>
            {
                if (c == '%')
    28a4:	1400021e 	bne	r2,r16,28b0 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    28a8:	8009883a 	mov	r4,r16
    28ac:	00000e06 	br	28e8 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    28b0:	1480051e 	bne	r2,r18,28c8 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    28b4:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    28b8:	ad800104 	addi	r22,r21,4
    28bc:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    28c0:	00029a40 	call	29a4 <alt_putchar>
    28c4:	00002906 	br	296c <alt_printf+0x138>
                }
                else if (c == 'x')
    28c8:	14c0201e 	bne	r2,r19,294c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    28cc:	adc00017 	ldw	r23,0(r21)
    28d0:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    28d4:	b8000326 	beq	r23,zero,28e4 <alt_printf+0xb0>
    28d8:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    28dc:	00c003c4 	movi	r3,15
    28e0:	00000306 	br	28f0 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    28e4:	01000c04 	movi	r4,48
    28e8:	00029a40 	call	29a4 <alt_putchar>
                        continue;
    28ec:	00001f06 	br	296c <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    28f0:	1d84983a 	sll	r2,r3,r22
    28f4:	15c4703a 	and	r2,r2,r23
    28f8:	1000021e 	bne	r2,zero,2904 <alt_printf+0xd0>
                        digit_shift -= 4;
    28fc:	b5bfff04 	addi	r22,r22,-4
    2900:	003ffb06 	br	28f0 <_gp+0xffff7d5c>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2904:	070003c4 	movi	fp,15
                        if (digit <= 9)
    2908:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    290c:	b0001716 	blt	r22,zero,296c <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2910:	e588983a 	sll	r4,fp,r22
    2914:	25c8703a 	and	r4,r4,r23
    2918:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    291c:	19000236 	bltu	r3,r4,2928 <alt_printf+0xf4>
                            c = '0' + digit;
    2920:	21000c04 	addi	r4,r4,48
    2924:	00000106 	br	292c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    2928:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    292c:	21003fcc 	andi	r4,r4,255
    2930:	2100201c 	xori	r4,r4,128
    2934:	213fe004 	addi	r4,r4,-128
    2938:	d8c00015 	stw	r3,0(sp)
    293c:	00029a40 	call	29a4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2940:	b5bfff04 	addi	r22,r22,-4
    2944:	d8c00017 	ldw	r3,0(sp)
    2948:	003ff006 	br	290c <_gp+0xffff7d78>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    294c:	1500071e 	bne	r2,r20,296c <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    2950:	ad800017 	ldw	r22,0(r21)
    2954:	ad400104 	addi	r21,r21,4

                    while(*s)
    2958:	b1000007 	ldb	r4,0(r22)
    295c:	20000326 	beq	r4,zero,296c <alt_printf+0x138>
                      alt_putchar(*s++);
    2960:	b5800044 	addi	r22,r22,1
    2964:	00029a40 	call	29a4 <alt_putchar>
    2968:	003ffb06 	br	2958 <_gp+0xffff7dc4>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    296c:	8805883a 	mov	r2,r17
    2970:	003fc406 	br	2884 <_gp+0xffff7cf0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    2974:	dfc00a17 	ldw	ra,40(sp)
    2978:	df000917 	ldw	fp,36(sp)
    297c:	ddc00817 	ldw	r23,32(sp)
    2980:	dd800717 	ldw	r22,28(sp)
    2984:	dd400617 	ldw	r21,24(sp)
    2988:	dd000517 	ldw	r20,20(sp)
    298c:	dcc00417 	ldw	r19,16(sp)
    2990:	dc800317 	ldw	r18,12(sp)
    2994:	dc400217 	ldw	r17,8(sp)
    2998:	dc000117 	ldw	r16,4(sp)
    299c:	dec00e04 	addi	sp,sp,56
    29a0:	f800283a 	ret

000029a4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    29a4:	defffd04 	addi	sp,sp,-12
    29a8:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    29ac:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    29b0:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    29b4:	01000034 	movhi	r4,0
    29b8:	000f883a 	mov	r7,zero
    29bc:	01800044 	movi	r6,1
    29c0:	d80b883a 	mov	r5,sp
    29c4:	210af004 	addi	r4,r4,11200
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    29c8:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    29cc:	0002a480 	call	2a48 <altera_avalon_jtag_uart_write>
    29d0:	00ffffc4 	movi	r3,-1
    29d4:	10c00126 	beq	r2,r3,29dc <alt_putchar+0x38>
        return -1;
    }
    return c;
    29d8:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    29dc:	dfc00217 	ldw	ra,8(sp)
    29e0:	dc000117 	ldw	r16,4(sp)
    29e4:	dec00304 	addi	sp,sp,12
    29e8:	f800283a 	ret

000029ec <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    29ec:	defffe04 	addi	sp,sp,-8
    29f0:	dc000015 	stw	r16,0(sp)
    29f4:	dfc00115 	stw	ra,4(sp)
    29f8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    29fc:	0002b000 	call	2b00 <strlen>
    2a00:	01000034 	movhi	r4,0
    2a04:	000f883a 	mov	r7,zero
    2a08:	100d883a 	mov	r6,r2
    2a0c:	800b883a 	mov	r5,r16
    2a10:	210af004 	addi	r4,r4,11200
#else
    return fputs(str, stdout);
#endif
#endif
}
    2a14:	dfc00117 	ldw	ra,4(sp)
    2a18:	dc000017 	ldw	r16,0(sp)
    2a1c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2a20:	0002a481 	jmpi	2a48 <altera_avalon_jtag_uart_write>

00002a24 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2a24:	deffff04 	addi	sp,sp,-4
    2a28:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    2a2c:	0002af80 	call	2af8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2a30:	00800044 	movi	r2,1
    2a34:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2a38:	dfc00017 	ldw	ra,0(sp)
    2a3c:	dec00104 	addi	sp,sp,4
    2a40:	f800283a 	ret

00002a44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2a44:	f800283a 	ret

00002a48 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2a48:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2a4c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2a50:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2a54:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2a58:	2980072e 	bgeu	r5,r6,2a78 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2a5c:	38c00037 	ldwio	r3,0(r7)
    2a60:	18ffffec 	andhi	r3,r3,65535
    2a64:	183ffc26 	beq	r3,zero,2a58 <_gp+0xffff7ec4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2a68:	28c00007 	ldb	r3,0(r5)
    2a6c:	20c00035 	stwio	r3,0(r4)
    2a70:	29400044 	addi	r5,r5,1
    2a74:	003ff806 	br	2a58 <_gp+0xffff7ec4>

  return count;
}
    2a78:	f800283a 	ret

00002a7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2a7c:	f800283a 	ret

00002a80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2a80:	f800283a 	ret

00002a84 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    2a84:	213ffe84 	addi	r4,r4,-6
    2a88:	008003c4 	movi	r2,15
    2a8c:	11001636 	bltu	r2,r4,2ae8 <alt_exception_cause_generated_bad_addr+0x64>
    2a90:	200890ba 	slli	r4,r4,2
    2a94:	00800034 	movhi	r2,0
    2a98:	108aaa04 	addi	r2,r2,10920
    2a9c:	2089883a 	add	r4,r4,r2
    2aa0:	20800017 	ldw	r2,0(r4)
    2aa4:	1000683a 	jmp	r2
    2aa8:	00002af0 	cmpltui	zero,zero,171
    2aac:	00002af0 	cmpltui	zero,zero,171
    2ab0:	00002ae8 	cmpgeui	zero,zero,171
    2ab4:	00002ae8 	cmpgeui	zero,zero,171
    2ab8:	00002ae8 	cmpgeui	zero,zero,171
    2abc:	00002af0 	cmpltui	zero,zero,171
    2ac0:	00002ae8 	cmpgeui	zero,zero,171
    2ac4:	00002ae8 	cmpgeui	zero,zero,171
    2ac8:	00002af0 	cmpltui	zero,zero,171
    2acc:	00002af0 	cmpltui	zero,zero,171
    2ad0:	00002ae8 	cmpgeui	zero,zero,171
    2ad4:	00002af0 	cmpltui	zero,zero,171
    2ad8:	00002ae8 	cmpgeui	zero,zero,171
    2adc:	00002ae8 	cmpgeui	zero,zero,171
    2ae0:	00002ae8 	cmpgeui	zero,zero,171
    2ae4:	00002af0 	cmpltui	zero,zero,171
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    2ae8:	0005883a 	mov	r2,zero
    2aec:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2af0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    2af4:	f800283a 	ret

00002af8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2af8:	000170fa 	wrctl	ienable,zero
    2afc:	f800283a 	ret

00002b00 <strlen>:
    2b00:	2005883a 	mov	r2,r4
    2b04:	10c00007 	ldb	r3,0(r2)
    2b08:	18000226 	beq	r3,zero,2b14 <strlen+0x14>
    2b0c:	10800044 	addi	r2,r2,1
    2b10:	003ffc06 	br	2b04 <_gp+0xffff7f70>
    2b14:	1105c83a 	sub	r2,r2,r4
    2b18:	f800283a 	ret
